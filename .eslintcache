[{"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\index.tsx":"1","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\store\\store.tsx":"2","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\App.tsx":"3","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\models\\users\\CurrentUserDetails.tsx":"4","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\layout\\main.tsx":"5","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\overlay\\overlay.tsx":"6","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\constants\\page-path.tsx":"7","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\helpers\\date-helper.tsx":"8","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\helpers\\string-helper.tsx":"9","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\layout\\navigation-side.tsx":"10","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\layout\\navigation-top.tsx":"11","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\user-avatar.tsx":"12","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-filter.tsx":"13","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-control.tsx":"14","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-form.tsx":"15","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-input.tsx":"16","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-checkbox.tsx":"17","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-date-picker.tsx":"18","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-select.tsx":"19","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-textarea.tsx":"20","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-switch.tsx":"21","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\store\\reducers\\app-components-reducer.tsx":"22","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\store\\reducers\\current-user-reducer.tsx":"23","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\errors\\forbidden-page.tsx":"24","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\errors\\not-found-page.tsx":"25","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\login\\login-page.tsx":"26","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\home\\home-page.tsx":"27","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\user\\user-profile-page.tsx":"28","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\user\\user-security-page.tsx":"29"},{"size":302,"mtime":1648259107969,"results":"30","hashOfConfig":"31"},{"size":582,"mtime":1648344678862,"results":"32","hashOfConfig":"31"},{"size":1930,"mtime":1648347537154,"results":"33","hashOfConfig":"31"},{"size":449,"mtime":1586315449924,"results":"34","hashOfConfig":"31"},{"size":2478,"mtime":1648356567660,"results":"35","hashOfConfig":"31"},{"size":312,"mtime":1648347378471,"results":"36","hashOfConfig":"31"},{"size":141,"mtime":1647821005710,"results":"37","hashOfConfig":"31"},{"size":522,"mtime":1647820908222,"results":"38","hashOfConfig":"31"},{"size":249,"mtime":1647820913310,"results":"39","hashOfConfig":"31"},{"size":2334,"mtime":1648357260974,"results":"40","hashOfConfig":"31"},{"size":3105,"mtime":1648347304619,"results":"41","hashOfConfig":"31"},{"size":1370,"mtime":1648347364192,"results":"42","hashOfConfig":"31"},{"size":5169,"mtime":1648250378666,"results":"43","hashOfConfig":"31"},{"size":754,"mtime":1647897695520,"results":"44","hashOfConfig":"31"},{"size":5110,"mtime":1648347274869,"results":"45","hashOfConfig":"31"},{"size":1144,"mtime":1648347274869,"results":"46","hashOfConfig":"31"},{"size":1415,"mtime":1648347234177,"results":"47","hashOfConfig":"31"},{"size":10617,"mtime":1647898147129,"results":"48","hashOfConfig":"31"},{"size":1646,"mtime":1648347274861,"results":"49","hashOfConfig":"31"},{"size":1007,"mtime":1648347274645,"results":"50","hashOfConfig":"31"},{"size":1168,"mtime":1648347274861,"results":"51","hashOfConfig":"31"},{"size":1553,"mtime":1648355679737,"results":"52","hashOfConfig":"31"},{"size":549,"mtime":1648344405050,"results":"53","hashOfConfig":"31"},{"size":169,"mtime":1648344856536,"results":"54","hashOfConfig":"31"},{"size":168,"mtime":1648344887281,"results":"55","hashOfConfig":"31"},{"size":2960,"mtime":1648346990511,"results":"56","hashOfConfig":"31"},{"size":527,"mtime":1648344934650,"results":"57","hashOfConfig":"31"},{"size":554,"mtime":1648347612498,"results":"58","hashOfConfig":"31"},{"size":452,"mtime":1648347575683,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"7khwjb",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"62"},"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\index.tsx",[],["125","126"],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\store\\store.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\App.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\models\\users\\CurrentUserDetails.tsx",[],["127","128"],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\layout\\main.tsx",["129","130","131","132","133"],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\overlay\\overlay.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\constants\\page-path.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\helpers\\date-helper.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\helpers\\string-helper.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\layout\\navigation-side.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\layout\\navigation-top.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\user-avatar.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-filter.tsx",["134","135"],"\r\nimport React, { Component } from \"react\";\r\nimport { Badge, Button, Col, Container, Offcanvas, Row } from \"react-bootstrap\";\r\nimport { IKeyValuePair } from \"../../models/common/iKeyValuePair\";\r\nimport { IMetadataFormControl, MetadataControlType } from \"./metadata-control\";\r\nimport { MetadataForm } from \"./metadata-form\";\r\nimport { IMetadataSelect } from \"./metadata-select\";\r\n\r\n\r\nexport interface IMetadataFilterProp {\r\n    id: string;\r\n    header?: string;\r\n\r\n    metadata: Array<IMetadataFormControl>;\r\n\r\n    btnSubmitText?: string;\r\n    onSubmit?: () => void;\r\n    onRemoveFilter?: (propName: string, callback?:() => void) => void;\r\n}\r\n\r\nexport interface IMetadataFilterState{\r\n    showOverlay: boolean;\r\n    filters: IKeyValuePair<string, string>[];\r\n}\r\n\r\nexport class MetadataFilter extends Component<IMetadataFilterProp, IMetadataFilterState> {\r\n    constructor(props: IMetadataFilterProp){\r\n        super(props);\r\n\r\n        this.state = {\r\n            showOverlay: false,\r\n            filters: []\r\n        }\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleClearFilters = this.handleClearFilters.bind(this);\r\n        this.handleCloseOverlay = this.handleCloseOverlay.bind(this);\r\n        this.handleShowOverlay = this.handleShowOverlay.bind(this);\r\n        this.handleBadgeClick = this.handleBadgeClick.bind(this);\r\n    }    \r\n\r\n    handleSubmit() {                                     \r\n        if(this.props.onSubmit)\r\n            this.props.onSubmit();\r\n            \r\n        var filters:IKeyValuePair<string, string>[] = [];\r\n        this.props.metadata.forEach(m => {\r\n            if(m.control.value){\r\n                if(m.controlType === MetadataControlType.Input || m.controlType === MetadataControlType.DatePicker)\r\n                    filters.push({key: m.control.name, value: `${m.control.label ?? m.control.name}: ${m.control.value}`});\r\n                else if(m.controlType === MetadataControlType.Select){\r\n                    var option = (m.control as unknown as IMetadataSelect).options.find(x => x.key == m.control.value);\r\n                    filters.push({key: m.control.name, value: `${m.control.label ?? m.control.name}: ${option?.value}`});\r\n                }\r\n            }     \r\n        });\r\n\r\n        this.setState({\r\n            showOverlay: false,\r\n            filters: filters\r\n        });\r\n    }\r\n    \r\n    handleClearFilters() {       \r\n        if(this.props.onRemoveFilter){\r\n\r\n        }\r\n    } \r\n\r\n    handleCloseOverlay(){\r\n        this.setState({showOverlay: false});\r\n    }\r\n\r\n    handleShowOverlay(){\r\n        this.setState({showOverlay: true});\r\n    }\r\n\r\n    handleBadgeClick(filter:IKeyValuePair<string, string>){\r\n        if(this.props.onRemoveFilter && filter){\r\n            this.props.onRemoveFilter(filter.key, this.handleSubmit);            \r\n        }\r\n    }\r\n    \r\n    renderFilterBadges(){\r\n        var badgeClassName = \"p-2 ms-1 me-1 d-flex justify-content-between align-items-center\";\r\n\r\n        if(this.props.onRemoveFilter)\r\n            return this.state.filters?.map((f, i) =>\r\n                <Badge pill bg=\"secondary\" className={badgeClassName + \" clickable\"} key={i} onClick={() => this.handleBadgeClick(f)}>\r\n                    <span>{f.value}</span>\r\n                    <span className=\"ps-2\"><i className=\"bi bi-x-circle clickable\"></i></span>\r\n                </Badge>\r\n            );            \r\n\r\n        return this.state.filters?.map((f, i) =>\r\n            <Badge pill bg=\"secondary\" className={badgeClassName} key={i}>{f.value}</Badge>\r\n        );            \r\n    }\r\n\r\n    renderFilterCountBadge(){\r\n        if(this.state.filters?.length > 0)\r\n            return <Badge bg=\"secondary\">{this.state.filters.length}</Badge>\r\n    }\r\n\r\n    render() {\r\n\t\treturn (\r\n            <>                \r\n                <Row>\r\n                    <Col xs={3} md={2}>\r\n                        <Button type=\"button\" onClick={this.handleShowOverlay}>\r\n                            <i className=\"bi bi-funnel\"></i> Filter { this.renderFilterCountBadge() }\r\n                        </Button>\r\n                    </Col>\r\n                    <Col className=\"d-flex align-items-center\">\r\n                        {this.renderFilterBadges()}\r\n                    </Col>\r\n                </Row>\r\n                <Offcanvas show={this.state.showOverlay} onHide={this.handleCloseOverlay}>\r\n                    <Offcanvas.Header closeButton>\r\n                        <Offcanvas.Title>{this.props.header ?? 'Filter'}</Offcanvas.Title>\r\n                    </Offcanvas.Header>\r\n                    <Offcanvas.Body>\r\n                        <MetadataForm \r\n                            id={this.props.id} \r\n                            metadata={this.props.metadata}\r\n                            btnSubmitText={this.props.btnSubmitText ?? 'Search'}\r\n                            onSubmit={this.handleSubmit}\r\n                            // btnCancelText=\"Reset Search\"\r\n                            // onCancel={this.handleClearFilters}                            \r\n                        />\r\n                    </Offcanvas.Body>\r\n                </Offcanvas>\r\n            </>\r\n\t\t);\r\n\t}\r\n}",["136","137"],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-control.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-form.tsx",["138"],"import React, { useState } from \"react\";\r\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\r\nimport { IMetadataCheckbox, MetadataCheckbox } from \"./metadata-checkbox\";\r\nimport { IMetadataFormControl, MetadataControlType } from \"./metadata-control\";\r\nimport { IMetadataDatePicker, MetadataDatePicker } from \"./metadata-date-picker\";\r\nimport { IMetadataInput, MetadataInput } from \"./metadata-input\";\r\nimport { IMetadataSelect, MetadataSelect } from \"./metadata-select\";\r\nimport { IMetadataSwitch, MetadataSwitch } from \"./metadata-switch\";\r\nimport { IMetadataTextArea, MetadataTextArea } from \"./metadata-textarea\";\r\n\r\n\r\nexport interface IMetadataForm {\r\n    id: string;\r\n    header?: string;\r\n\r\n    metadata: Array<IMetadataFormControl>;\r\n\r\n    btnSubmitText?: string;\r\n    onSubmit?: () => void;\r\n\r\n    btnCancelText?: string;\r\n    onCancel?: () => void;\r\n}\r\n\r\nexport const MetadataForm = (props: IMetadataForm): JSX.Element => {\r\n    let _formRef = React.createRef<HTMLFormElement>();\r\n    const [validatedformClass, setvalidatedformClass] = useState('');\r\n\r\n    function renderControls() {\r\n        if(props.metadata?.length > 0){\r\n            if(props.metadata.find(m => m.control.tabIndex != undefined)) { }\r\n            else{\r\n                props.metadata.forEach((m, i, arr) => {\r\n                    arr[i].control.tabIndex = i + 1\r\n                });\r\n            }\r\n\r\n            return props.metadata.map((m, i) => \r\n                <Col className=\"mb-3\"\r\n                    xs={m.control.widths?.xs ?? 12}\r\n                    sm={m.control.widths?.sm}\r\n                    md={m.control.widths?.md}\r\n                    lg={m.control.widths?.lg}\r\n                    xl={m.control.widths?.xl}\r\n                    xxl={m.control.widths?.xxl}\r\n                    key={i}\r\n                >\r\n                    <Form.Group>\r\n                        { renderControlAs(m) }                        \r\n                    </Form.Group>\r\n                </Col>\r\n            );\r\n        }            \r\n    }\r\n\r\n    function renderControlAs(metadataFormControl: IMetadataFormControl){\r\n        if(metadataFormControl.controlType === MetadataControlType.Input)\r\n            return <MetadataInput {...(metadataFormControl.control as IMetadataInput)} />\r\n        else if(metadataFormControl.controlType === MetadataControlType.Select)\r\n            return <MetadataSelect {...(metadataFormControl.control as IMetadataSelect)} />\r\n        else if(metadataFormControl.controlType === MetadataControlType.Textarea)\r\n            return <MetadataTextArea {...(metadataFormControl.control as IMetadataTextArea)} />\r\n        else if(metadataFormControl.controlType === MetadataControlType.DatePicker)\r\n            return <MetadataDatePicker {...(metadataFormControl.control as IMetadataDatePicker)} />\r\n        else if(metadataFormControl.controlType === MetadataControlType.Checkbox)\r\n            return <MetadataCheckbox {...(metadataFormControl.control as IMetadataCheckbox)} />\r\n            else if(metadataFormControl.controlType === MetadataControlType.Switch)\r\n                return <MetadataSwitch {...(metadataFormControl.control as IMetadataSwitch)} />\r\n            \r\n    }\r\n\r\n    function handleSubmit(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) { \r\n        e.preventDefault();\r\n        \r\n        if(_formRef.current){\r\n            if(!_formRef.current.checkValidity()){                \r\n                setvalidatedformClass('was-validated');\r\n                return;\r\n            }            \r\n\r\n            if(props.onSubmit)\r\n                props.onSubmit();\r\n        }        \r\n    }\r\n\r\n    function renderBtnSubmit(){\r\n        if(props.onSubmit){\r\n            return  (\r\n                <Button variant=\"outline-primary\" type=\"submit\" onClick={handleSubmit}>\r\n                    {props.btnSubmitText ?? \"Submit\"}\r\n                </Button>\r\n            );            \r\n        }\r\n    }\r\n\r\n    function handleCancel(){\r\n        // do other stuff here if needed eg: hide button?, load button?\r\n        \r\n        if(props.onCancel)\r\n            props.onCancel();\r\n    }\r\n\r\n    function renderBtnCancel(){\r\n        if(props.onCancel){\r\n            return  (\r\n                <Button variant=\"outline-danger me-3\" onClick={handleCancel}>\r\n                    {props.btnCancelText ?? \"Cancel\"}\r\n                </Button>\r\n            );            \r\n        }\r\n    }\r\n    \r\n    function renderHeader(){\r\n        if(props.header)\r\n            return (\r\n                <Row>\r\n                    <Col className=\"pb-3\"><h3>{props.header}</h3></Col>\r\n                </Row>\r\n            )\r\n    }\r\n\r\n    return (\r\n        <Form id={props.id} className={\"p2 w-100 \" + validatedformClass} ref={_formRef} >\r\n            {renderHeader()}\r\n            <Row>\r\n                { renderControls() }\r\n            </Row>\r\n            <Row className=\"pt-2\">\r\n                <Col className=\"d-flex justify-content-end align-items-center\">\r\n                    { renderBtnCancel() }\r\n                    { renderBtnSubmit() }\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    );\r\n}","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-input.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-checkbox.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-date-picker.tsx",["139","140","141","142","143","144"],"\r\nimport React, { ChangeEvent, Component, createRef } from \"react\";\r\nimport { Button, Col, Container, FloatingLabel, Form, InputGroup, Overlay, OverlayTrigger, Popover, Row } from \"react-bootstrap\";\r\nimport { StringLiteralLike } from \"typescript\";\r\nimport { DateHelper } from \"../../helpers/date-helper\";\r\nimport IMetadataControl from \"./metadata-control\";\r\n\r\n\r\nexport interface IMetadataDatePicker extends IMetadataControl {     \r\n    date?: Date;\r\n    onChange?: (dateSelected: Date | undefined) => void;\r\n}\r\n\r\ninterface IState {\r\n    show: boolean;    \r\n    viewDate: Date;\r\n    viewYear: number;\r\n    viewMonth: number;    \r\n    selectedDate?: Date;\r\n    selectedDateText?: string;\r\n}\r\n\r\nexport class MetadataDatePicker extends Component<IMetadataDatePicker, IState> {\r\n    _inputGroupRef = createRef<HTMLDivElement>();\r\n    _inputRef = createRef<HTMLInputElement>();\r\n\r\n    _months = [\r\n        { name: \"January\", shortenedName: \"Jan\", number: 1 },\r\n        { name: \"February\", shortenedName: \"Feb\", number: 2 },\r\n        { name: \"March\", shortenedName: \"Mar\", number: 3 },\r\n        { name: \"April\", shortenedName: \"Apr\", number: 4 },\r\n        { name: \"May\", shortenedName: \"May\", number: 5 },\r\n        { name: \"June\", shortenedName: \"Jun\", number: 6 },\r\n        { name: \"July\", shortenedName: \"Jul\", number: 7 },\r\n        { name: \"August\", shortenedName: \"Aug\", number: 8 },\r\n        { name: \"September\", shortenedName: \"Sep\", number: 9 },\r\n        { name: \"October\", shortenedName: \"Oct\", number: 10 },\r\n        { name: \"November\", shortenedName: \"Nov\", number: 11 },\r\n        { name: \"December\", shortenedName: \"Dec\", number: 12 }\r\n    ]\r\n\r\n    constructor(props:IMetadataDatePicker){\r\n        super(props);\r\n\r\n        var viewDate = new Date();\r\n        var selectedDate: Date | undefined;\r\n        var selectedDateText: string = '';\r\n        if(this.props.date){\r\n            viewDate = this.props.date;\r\n            selectedDate = new Date(this.props.date);\r\n            selectedDateText = DateHelper.ToStringYearMonthDate(selectedDate);\r\n        }\r\n        \r\n        this.state = {\r\n            show: false,\r\n            viewDate: viewDate,            \r\n            viewYear: viewDate.getFullYear(),\r\n            viewMonth: viewDate.getMonth() + 1,\r\n            selectedDate: selectedDate,\r\n            selectedDateText: selectedDateText\r\n        }\r\n\r\n        this.handleCalendarClick = this.handleCalendarClick.bind(this);    \r\n        this.handleCalendarSelectChange = this.handleCalendarSelectChange.bind(this);\r\n        this.handleCalendarPrevMonth = this.handleCalendarPrevMonth.bind(this);\r\n        this.handleCalendarNextMonth = this.handleCalendarNextMonth.bind(this);\r\n        this.handleDateSelect = this.handleDateSelect.bind(this);\r\n    }\r\n\r\n    handleCalendarClick() {        \r\n        if(!this.state.show){\r\n            var viewDate: Date = this.state.selectedDate \r\n                ? new Date(this.state.selectedDate.getTime())\r\n                : new Date();\r\n                \r\n            this.setState({\r\n                show: true,\r\n                viewDate: viewDate,            \r\n                viewYear: viewDate.getFullYear(),\r\n                viewMonth: viewDate.getMonth() + 1            \r\n            });\r\n\r\n            this._inputRef.current?.focus();\r\n        }\r\n        else {\r\n            this.setState({\r\n                show: false\r\n            });\r\n        }        \r\n    }\r\n\r\n    handleCalendarSelectChange(e: React.ChangeEvent<HTMLSelectElement>) {\r\n        var value = parseInt(e.target.value);\r\n        var viewDate = e.target.name === \"viewYear\" ? new Date(value, this.state.viewMonth - 1, 1) : new Date(this.state.viewYear, value - 1, 1);        \r\n        this.setState({ \r\n            viewDate: viewDate,            \r\n            viewYear: viewDate.getFullYear(),\r\n            viewMonth: viewDate.getMonth() + 1\r\n        });\r\n    }\r\n\r\n    handleCalendarPrevMonth() {\r\n        var viewDate = new Date(this.state.viewDate.getTime());\r\n        viewDate.setMonth(viewDate.getMonth() - 1);\r\n        this.setState({ \r\n            viewDate: viewDate,            \r\n            viewYear: viewDate.getFullYear(),\r\n            viewMonth: viewDate.getMonth() + 1\r\n        });\r\n    }\r\n\r\n    handleCalendarNextMonth() {\r\n        var viewDate = new Date(this.state.viewDate.getTime());\r\n        viewDate.setMonth(viewDate.getMonth() + 1);\r\n        this.setState({ \r\n            viewDate: viewDate,            \r\n            viewYear: viewDate.getFullYear(),\r\n            viewMonth: viewDate.getMonth() + 1\r\n        });\r\n    }\r\n\r\n    handleDateSelect(e: React.MouseEvent<HTMLDivElement>) {\r\n        if(e.currentTarget.dataset['date']){\r\n            var dateArr = e.currentTarget.dataset['date'].split('-');\r\n            var selectedDate = new Date(parseInt(dateArr[0]), parseInt(dateArr[1]) - 1, parseInt(dateArr[2]));\r\n            this.setState({\r\n                selectedDate: selectedDate,\r\n                show: false,\r\n                selectedDateText: DateHelper.ToStringYearMonthDate(selectedDate)\r\n            }, () => {\r\n                if(this.props.onChange){\r\n                    this.props.onChange(selectedDate);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    renderDatesView() {\r\n        var date = new Date(this.state.viewDate.getTime());\r\n        date.setDate(1);\r\n\r\n        if(date.getDay() != 0){\r\n            date.setDate(date.getDate() - date.getDay());\r\n        }\r\n\r\n        var rows = [];\r\n        for(var r = 0; r < 6; r++){\r\n            var cols = [];\r\n            for(var c = 0; c < 7; c++){\r\n                var isSelectedDate = this.state.selectedDate ? DateHelper.isDateOnlyEqual(date, this.state.selectedDate) : false;\r\n                var isSameMonth = this.state.viewMonth === date.getMonth() + 1;\r\n                cols.push(\r\n                    <Col key={c} \r\n                         data-date={DateHelper.ToStringYearMonthDate(date)} \r\n                         onClick={this.handleDateSelect}\r\n                         className={\"calendar-day\" + (isSelectedDate ? \" calendar-day-selected\" : \"\") + (isSameMonth ? \"\" : \" calendar-day-other-month\")}>\r\n                        \r\n                        {date.getDate()}\r\n                    </Col>\r\n                );\r\n                date.setDate(date.getDate() + 1);\r\n            }\r\n            rows.push(<Row key={r}>{cols}</Row>);\r\n        }\r\n\r\n        return rows; \r\n    }\r\n\r\n    renderMonthOptions() {\r\n        return this._months.map((m, i) => <option key={i} value={m.number}>{m.shortenedName}</option>);\r\n    }\r\n\r\n    renderYearOptions() {\r\n        var year = this.state.viewDate.getFullYear();\r\n        var view = [];\r\n        for(var y = year - 100; y < year + 80; y++){\r\n            view.push(<option key={y} value={y}>{y}</option>);\r\n        }\r\n\r\n        return view;\r\n    }\r\n\r\n    render() {            \r\n\t\treturn (\r\n            <InputGroup className=\"mb-3\" ref={this._inputGroupRef}>\r\n                <FloatingLabel label={this.props.label} controlId={this.props.id} className=\"flex-grow-1\">\r\n                    <Form.Control\r\n                        value={this.state.selectedDateText}\r\n\r\n                        disabled={this.props.disabled}\r\n                        name={this.props.name}\r\n                        required={this.props.required}\r\n\r\n                        style={{display: this.props.hidden === true ? 'none' : 'inherit'}}\r\n                        placeholder={this.props.label}\r\n                        tabIndex={this.props.tabIndex}\r\n\r\n                        readOnly\r\n                        onClick={this.handleCalendarClick}                        \r\n                        className={\"metadata-input calendar-input\" + (this.state.show ? \" calendar-focus\" : \"\")}\r\n                        ref={this._inputRef}\r\n                    />\r\n                </FloatingLabel>                            \r\n                <i className=\"bi bi-calendar3 calendar-button\" onClick={this.handleCalendarClick}></i>                \r\n                <Overlay\r\n                    show={this.state.show}\r\n                    target={this._inputGroupRef}\r\n                    container={this._inputGroupRef}\r\n                    placement=\"bottom\"\r\n                    containerPadding={20}\r\n                    rootClose={true}\r\n                    rootCloseEvent=\"click\"\r\n                    onHide={() => {this.setState({ show: false })}}\r\n                >\r\n                    <Popover className=\"calendar-popover\" >\r\n                        <Popover.Header className=\"d-flex justify-content-between align-items-center\">\r\n                            <i className=\"bi bi-caret-left-fill clickable\" onClick={this.handleCalendarPrevMonth}></i>\r\n                            <div className=\"flex-grow-1 ps-3 pe-3 d-flex align-items-center justify-content-between\">\r\n                                <Form.Select size=\"sm\" \r\n                                    value={this.state.viewMonth} \r\n                                    name=\"viewMonth\"\r\n                                    onChange={this.handleCalendarSelectChange}\r\n                                >\r\n                                    { this.renderMonthOptions() }\r\n                                </Form.Select>\r\n                                <Form.Select size=\"sm\" \r\n                                    value={this.state.viewYear} \r\n                                    name=\"viewYear\"\r\n                                    onChange={this.handleCalendarSelectChange}\r\n                                >\r\n                                    { this.renderYearOptions() }\r\n                                </Form.Select>\r\n                            </div>\r\n                            <i className=\"bi bi-caret-right-fill clickable\" onClick={this.handleCalendarNextMonth}></i>\r\n                        </Popover.Header>\r\n                        <Popover.Body>\r\n                            <Row>\r\n                                <Col></Col>\r\n                            </Row>\r\n                            <Row className=\"calendar-date-header\">\r\n                                <Col>Su</Col>\r\n                                <Col>Mo</Col>\r\n                                <Col>Tu</Col>\r\n                                <Col>We</Col>\r\n                                <Col>Th</Col>\r\n                                <Col>Fr</Col>\r\n                                <Col>Sa</Col>\r\n                            </Row>\r\n                            { this.renderDatesView() }\r\n                        </Popover.Body>\r\n                    </Popover>\r\n                </Overlay>\r\n            </InputGroup>\r\n\t\t);\r\n\t}\r\n}","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-select.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-textarea.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadata-switch.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\store\\reducers\\app-components-reducer.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\store\\reducers\\current-user-reducer.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\errors\\forbidden-page.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\errors\\not-found-page.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\login\\login-page.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\home\\home-page.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\user\\user-profile-page.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\user\\user-security-page.tsx",["145"],"import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { LayoutMain } from '../../components/layout/main';\r\nimport { RootState } from '../../store/store';\r\n\r\n\r\nexport const UserSecurityPage = (): JSX.Element => {\r\n    const _currentUser = useSelector((state: RootState) => state.currentUser);\r\n\r\n        return (\r\n            <LayoutMain >\r\n                <p>USER SECURITY PAGE</p>\r\n            </LayoutMain>\r\n        );\r\n}\r\n\r\n",{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"146","replacedBy":"150"},{"ruleId":"148","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":1,"column":36,"nodeType":"154","messageId":"155","endLine":1,"endColumn":45},{"ruleId":"152","severity":1,"message":"156","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":13},{"ruleId":"152","severity":1,"message":"157","line":2,"column":15,"nodeType":"154","messageId":"155","endLine":2,"endColumn":24},{"ruleId":"152","severity":1,"message":"158","line":2,"column":26,"nodeType":"154","messageId":"155","endLine":2,"endColumn":29},{"ruleId":"159","severity":1,"message":"160","line":24,"column":5,"nodeType":"154","endLine":24,"endColumn":14,"suggestions":"161"},{"ruleId":"152","severity":1,"message":"157","line":3,"column":30,"nodeType":"154","messageId":"155","endLine":3,"endColumn":39},{"ruleId":"162","severity":1,"message":"163","line":52,"column":100,"nodeType":"164","messageId":"165","endLine":52,"endColumn":102},{"ruleId":"146","replacedBy":"166"},{"ruleId":"148","replacedBy":"167"},{"ruleId":"162","severity":1,"message":"168","line":31,"column":60,"nodeType":"164","messageId":"165","endLine":31,"endColumn":62},{"ruleId":"152","severity":1,"message":"169","line":2,"column":17,"nodeType":"154","messageId":"155","endLine":2,"endColumn":28},{"ruleId":"152","severity":1,"message":"170","line":3,"column":10,"nodeType":"154","messageId":"155","endLine":3,"endColumn":16},{"ruleId":"152","severity":1,"message":"157","line":3,"column":23,"nodeType":"154","messageId":"155","endLine":3,"endColumn":32},{"ruleId":"152","severity":1,"message":"171","line":3,"column":76,"nodeType":"154","messageId":"155","endLine":3,"endColumn":90},{"ruleId":"152","severity":1,"message":"172","line":4,"column":10,"nodeType":"154","messageId":"155","endLine":4,"endColumn":27},{"ruleId":"162","severity":1,"message":"168","line":142,"column":26,"nodeType":"164","messageId":"165","endLine":142,"endColumn":28},{"ruleId":"152","severity":1,"message":"173","line":8,"column":11,"nodeType":"154","messageId":"155","endLine":8,"endColumn":23},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],["174"],["175"],"@typescript-eslint/no-unused-vars","'ReactNode' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setPageTitle'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [_history.location.pathname, props.title] as a second argument to the useEffect Hook.",["176"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["174"],["175"],"Expected '!==' and instead saw '!='.","'ChangeEvent' is defined but never used.","'Button' is defined but never used.","'OverlayTrigger' is defined but never used.","'StringLiteralLike' is defined but never used.","'_currentUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},"Add dependencies array: [_history.location.pathname, props.title]",{"range":"179","text":"180"},[1373,1373],", [_history.location.pathname, props.title]"]