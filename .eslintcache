[{"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\index.tsx":"1","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\store\\store.tsx":"2","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\App.tsx":"3","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\store\\character\\reducer.tsx":"4","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\store\\currentUser\\reducer.tsx":"5","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\constants\\pagePath.tsx":"6","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\errors\\forbidden.tsx":"7","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\errors\\notFound.tsx":"8","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\login\\login.tsx":"9","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\home\\home.tsx":"10","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\user\\profile.tsx":"11","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\user\\security.tsx":"12","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\store\\character\\actions.tsx":"13","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\store\\currentUser\\actions.tsx":"14","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\models\\users\\CurrentUserDetails.tsx":"15","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\constants\\pageNavLinks.tsx":"16","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\helpers\\dateHelper.tsx":"17","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadataControl.tsx":"18","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadataFilter.tsx":"19","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadataForm.tsx":"20","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\layout\\main.tsx":"21","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadataInput.tsx":"22","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadataDatePicker.tsx":"23","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadataSelect.tsx":"24","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadataTextArea.tsx":"25","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\helpers\\stringHelper.tsx":"26","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\layout\\mainNav.tsx":"27","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\layout\\pageNav.tsx":"28","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\userAvatar.tsx":"29","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\api\\apiBase.tsx":"30","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\constants\\appConstants.tsx":"31","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadataCheckbox.tsx":"32"},{"size":997,"mtime":1586315449924,"results":"33","hashOfConfig":"34"},{"size":958,"mtime":1586315449927,"results":"35","hashOfConfig":"34"},{"size":1429,"mtime":1645401034425,"results":"36","hashOfConfig":"34"},{"size":894,"mtime":1586315449926,"results":"37","hashOfConfig":"34"},{"size":863,"mtime":1586315449927,"results":"38","hashOfConfig":"34"},{"size":119,"mtime":1645343428980,"results":"39","hashOfConfig":"34"},{"size":484,"mtime":1607363478267,"results":"40","hashOfConfig":"34"},{"size":477,"mtime":1607363474568,"results":"41","hashOfConfig":"34"},{"size":3636,"mtime":1645404803279,"results":"42","hashOfConfig":"34"},{"size":5334,"mtime":1645400412727,"results":"43","hashOfConfig":"34"},{"size":1508,"mtime":1645400905954,"results":"44","hashOfConfig":"34"},{"size":1151,"mtime":1645343429010,"results":"45","hashOfConfig":"34"},{"size":1036,"mtime":1607104398509,"results":"46","hashOfConfig":"34"},{"size":604,"mtime":1586315449927,"results":"47","hashOfConfig":"34"},{"size":449,"mtime":1586315449924,"results":"48","hashOfConfig":"34"},{"size":830,"mtime":1645343428980,"results":"49","hashOfConfig":"34"},{"size":522,"mtime":1645343428981,"results":"50","hashOfConfig":"34"},{"size":741,"mtime":1645404658974,"results":"51","hashOfConfig":"34"},{"size":5272,"mtime":1645343428950,"results":"52","hashOfConfig":"34"},{"size":5276,"mtime":1645402105975,"results":"53","hashOfConfig":"34"},{"size":3202,"mtime":1645401274325,"results":"54","hashOfConfig":"34"},{"size":1313,"mtime":1645343428962,"results":"55","hashOfConfig":"34"},{"size":10646,"mtime":1645343428941,"results":"56","hashOfConfig":"34"},{"size":1808,"mtime":1645343428969,"results":"57","hashOfConfig":"34"},{"size":1161,"mtime":1645343428969,"results":"58","hashOfConfig":"34"},{"size":249,"mtime":1645343428981,"results":"59","hashOfConfig":"34"},{"size":4870,"mtime":1645343428927,"results":"60","hashOfConfig":"34"},{"size":2554,"mtime":1645343428931,"results":"61","hashOfConfig":"34"},{"size":1864,"mtime":1645343428980,"results":"62","hashOfConfig":"34"},{"size":2304,"mtime":1645398829932,"results":"63","hashOfConfig":"34"},{"size":187,"mtime":1645398411655,"results":"64","hashOfConfig":"34"},{"size":1719,"mtime":1645404498237,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"7khwjb",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\index.tsx",[],["140","141"],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\store\\store.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\App.tsx",["142"],"import React, { Component } from 'react';\r\nimport HomePage from './pages/home/home';\r\nimport LoginPage from './pages/login/login';\r\nimport NotFoundPage from './pages/errors/notFound';\r\nimport ForbiddenPage from './pages/errors/forbidden';\r\nimport UserProfilePage from './pages/user/profile';\r\nimport UserSecurityPage from './pages/user/security';\r\nimport {\r\n\tBrowserRouter as Router, \r\n\tRoute,\r\n\tRedirect,\r\n\tSwitch\r\n} from 'react-router-dom';\r\nimport SecuredRoute from './components/securedRoute';\r\nimport './styles/index.scss';\r\nimport { PagePath } from './constants/pagePath';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\nclass App extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<ToastContainer/>\r\n\t\t\t\t<Router>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route exact path=\"/login\" component={LoginPage} />\r\n\t\t\t\t\t\t<Route exact path=\"/not-found\" component={NotFoundPage} />\r\n\t\t\t\t\t\t<Route exact path=\"/fobidden\" component={ForbiddenPage} />\t\t\t\t\t\t\r\n\t\t\t\t\t\t<Route exact path={PagePath.home} component={HomePage} />\r\n\t\t\t\t\t\t<Route exact path={PagePath.userProfile} component={UserProfilePage} />\r\n\t\t\t\t\t\t<Route exact path={PagePath.userSecurity} component={UserSecurityPage} />\r\n\t\t\t\t\t\t{/* <SecuredRoute exact={true} path=\"/\" component={HomePage} /> */}\r\n\t\t\t\t\t\t<Redirect to={PagePath.home} />\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</Router>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\store\\character\\reducer.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\store\\currentUser\\reducer.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\constants\\pagePath.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\errors\\forbidden.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\errors\\notFound.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\login\\login.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\home\\home.tsx",["143","144","145","146"],"import React, { ChangeEvent, Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, RouteComponentProps } from 'react-router-dom';\r\nimport { PagePath } from '../../constants/pagePath';\r\nimport { ICurrentUserDetails } from '../../models/users/CurrentUserDetails';\r\nimport { IAppState } from '../../store/store';\r\nimport LayoutMain from '../../components/layout/main';\r\nimport UserProfilePage from '../user/profile';\r\nimport MetadataFilter from '../../components/metadata/metadataFilter';\r\nimport { MetadataControlType } from '../../components/metadata/metadataControl';\r\nimport { IMetadataInput } from '../../components/metadata/metadataInput';\r\nimport { IMetadataSelect } from '../../components/metadata/metadataSelect';\r\nimport MetadataDatePicker, { IMetadataDatePicker } from '../../components/metadata/metadataDatePicker';\r\nimport { DateHelper } from '../../helpers/dateHelper';\r\n\r\ninterface IRouteProps { }\r\n\r\ninterface IProps extends RouteComponentProps<IRouteProps> {\r\n    currentUser: ICurrentUserDetails;\r\n    dispatch: any;\r\n}\r\n\r\ninterface IState { \r\n    userMenu: boolean;\r\n    name: string;\r\n    select: number | undefined;\r\n    date: string;\r\n}\r\n\r\nclass HomePage extends Component<IProps, IState> {\r\n    constructor(props: IProps){\r\n        super(props);\r\n\r\n        this.state = {\r\n            userMenu: false,\r\n            name: '',\r\n            select: undefined,\r\n            date: ''\r\n        };\r\n        \r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSelectChange = this.handleSelectChange.bind(this);\r\n        this.handleDateChange = this.handleDateChange.bind(this);\r\n        this.onRemoveFilter = this.onRemoveFilter.bind(this);\r\n        this.onUserNavOpenClick = this.onUserNavOpenClick.bind(this);\r\n        this.onUserNavCloseClick = this.onUserNavCloseClick.bind(this);\r\n    }\r\n\r\n    private handleInputChange(e: ChangeEvent<HTMLInputElement>) { //e is element\r\n        this.setState({ ...this.state, [e.target.name]: e.target.value });\r\n    }\r\n\r\n    private handleSelectChange(e: ChangeEvent<HTMLSelectElement>) { //e is element\r\n        this.setState({ ...this.state, [e.target.name]: e.target.value });\r\n    }\r\n\r\n    private handleDateChange(date: Date) {\r\n        this.setState({ date: DateHelper.ToStringYearMonthDate(date) });\r\n    }\r\n\r\n    private onRemoveFilter(propName:string, callback?:() => void) { //e is element\r\n        this.setState({ ...this.state, [propName]: '' }, callback);\r\n    }\r\n\r\n    private onUserNavOpenClick() {        \r\n        this.setState({userMenu: true});        \r\n    }\r\n\r\n    private onUserNavCloseClick() {\r\n        this.setState({userMenu: false});\r\n    }\r\n\r\n    render() {\r\n\t\treturn (\r\n\t\t\t<LayoutMain currentPath={this.props.location.pathname} addAction={() => {}}>\r\n                {/* <MetadataDatePicker id='username' label='Date' name='Date' value={this.state.date} /> */}\r\n                <MetadataFilter \r\n                    id=\"filter\" \r\n                    onRemoveFilter={this.onRemoveFilter}                    \r\n                    metadata={[\r\n                        {\r\n                            controlType: MetadataControlType.Input,\r\n                            control:  {\r\n                                    id: 'username',\r\n                                    label: 'Name',\r\n                                    value: this.state.name,\r\n                                    name: 'name',\r\n                                    onChange: this.handleInputChange\r\n                            } as IMetadataInput,                     \r\n                        },\r\n                        {\r\n                            controlType: MetadataControlType.Select,\r\n                            control: {\r\n                                id: 'select',\r\n                                label: 'Select',\r\n                                value: this.state.select,\r\n                                name: 'select',\r\n                                onChange: this.handleSelectChange,\r\n                                options: [\r\n                                    {key: 0, value:'none'},\r\n                                    {key: 1, value:'one'},\r\n                                    {key: 2, value:'two'},\r\n                                    {key: 3, value:'three'}\r\n                                ]                        \r\n                            } as IMetadataSelect,\r\n                        },\r\n                        {\r\n                            controlType: MetadataControlType.DatePicker,\r\n                            control:  {\r\n                                    id: 'date',\r\n                                    label: 'Date',\r\n                                    value: this.state.date,\r\n                                    name: 'Date',\r\n                                    onChange: this.handleDateChange\r\n                            } as IMetadataDatePicker,                     \r\n                        },\r\n                    ]}\r\n                />\r\n            </LayoutMain>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (store: IAppState) => {\r\n\treturn {\r\n\t\tcurrentUser: store.currentUserState.currentUser\r\n\t};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return { dispatch };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\user\\profile.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\pages\\user\\security.tsx",["147","148"],"import React, { ChangeEvent, Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport LayoutMain from '../../components/layout/main';\r\nimport { PageNavLink } from '../../constants/pageNavLinks';\r\nimport { PagePath } from '../../constants/pagePath';\r\nimport { IAppState } from '../../store/store';\r\n\r\ninterface IRouteProps { }\r\n\r\ninterface IProps extends RouteComponentProps<IRouteProps> {\r\n    dispatch: any;\r\n}\r\n\r\ninterface IState {\r\n}\r\n\r\nclass UserSecurityPage extends Component<IProps, IState> {\r\n    constructor(props: IProps){\r\n        super(props);\r\n\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    render() {\r\n\t\treturn (\r\n\t\t\t<LayoutMain \r\n                currentPath={this.props.location.pathname}\r\n                pageNavLinks={PageNavLink.user}\r\n            >\r\n                <p>security</p>\r\n            </LayoutMain>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (store: IAppState) => {\r\n\treturn {\r\n\t};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return { dispatch };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSecurityPage);\r\n","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\store\\character\\actions.tsx",["149","150","151","152"],"import { ActionCreator, Dispatch } from 'redux';\r\nimport axios from 'axios';\r\n\r\nimport { ICharacterState } from './reducer';\r\nimport { ICharacter } from '../../models/characters/ICharacter';\r\n\r\n// Create Action Constants\r\nexport enum CharacterActionTypes {\r\n\tADD = 'ADD',\r\n\tGET_ALL = 'GET_ALL',\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface ICharacterGetAllAction {\r\n\ttype: CharacterActionTypes.GET_ALL;\r\n\tcharacters: ICharacter[];\r\n}\r\n\r\nexport interface IAddCharacterAction {\r\n\ttype: CharacterActionTypes.ADD;\r\n\tcharacter: ICharacter;\r\n}\r\n\r\n/* \r\nCombine the action types with a union (we assume there are more)\r\nexample: export type CharacterActions = IGetAllAction | IGetOneAction ... \r\n*/\r\nexport type CharacterActions = ICharacterGetAllAction | IAddCharacterAction;\r\n\r\n/* Get All Action\r\n<Promise<Return Type>, State Interface, Type of Param, Type of Action> */\r\nexport function addCharacter(name: string): IAddCharacterAction {\r\n\treturn {\r\n\t\ttype: CharacterActionTypes.ADD,\r\n\t\tcharacter: {\r\n\t\t\tname: name\r\n\t\t}\r\n\t}\r\n}","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\store\\currentUser\\actions.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\models\\users\\CurrentUserDetails.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\constants\\pageNavLinks.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\helpers\\dateHelper.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadataControl.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadataFilter.tsx",["153"],"\r\nimport React, { Component } from \"react\";\r\nimport { Badge, Button, Col, Container, Offcanvas, Row } from \"react-bootstrap\";\r\nimport { IKeyValuePair } from \"../../models/common/iKeyValuePair\";\r\nimport { IMetadataFormControl, MetadataControlType } from \"./metadataControl\";\r\nimport MetadataForm from \"./metadataForm\";\r\nimport { IMetadataSelect } from \"./metadataSelect\";\r\n\r\n\r\nexport interface IMetadataFilterProp {\r\n    id: string;\r\n    header?: string;\r\n\r\n    metadata: Array<IMetadataFormControl>;\r\n\r\n    btnSubmitText?: string;\r\n    onSubmit?: () => void;\r\n    onRemoveFilter?: (propName: string, callback?:() => void) => void;\r\n}\r\n\r\nexport interface IMetadataFilterState{\r\n    showOverlay: boolean;\r\n    filters: IKeyValuePair<string, string>[];\r\n}\r\n\r\nclass MetadataFilter extends Component<IMetadataFilterProp, IMetadataFilterState> {\r\n    constructor(props: IMetadataFilterProp){\r\n        super(props);\r\n\r\n        this.state = {\r\n            showOverlay: false,\r\n            filters: []\r\n        }\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleClearFilters = this.handleClearFilters.bind(this);\r\n        this.handleCloseOverlay = this.handleCloseOverlay.bind(this);\r\n        this.handleShowOverlay = this.handleShowOverlay.bind(this);\r\n        this.handleBadgeClick = this.handleBadgeClick.bind(this);\r\n    }    \r\n\r\n    handleSubmit() {                                     \r\n        if(this.props.onSubmit)\r\n            this.props.onSubmit();\r\n            \r\n        var filters:IKeyValuePair<string, string>[] = [];\r\n        this.props.metadata.forEach(m => {\r\n            if(m.control.value){\r\n                if(m.controlType === MetadataControlType.Input || m.controlType === MetadataControlType.DatePicker)\r\n                    filters.push({key: m.control.name, value: `${m.control.label ?? m.control.name}: ${m.control.value}`});\r\n                else if(m.controlType === MetadataControlType.Select){\r\n                    var option = (m.control as unknown as IMetadataSelect).options.find(x => x.key == m.control.value);\r\n                    filters.push({key: m.control.name, value: `${m.control.label ?? m.control.name}: ${option?.value}`});\r\n                }\r\n            }     \r\n        });\r\n\r\n        this.setState({\r\n            showOverlay: false,\r\n            filters: filters\r\n        });\r\n    }\r\n    \r\n    handleClearFilters() {       \r\n        if(this.props.onRemoveFilter){\r\n\r\n        }\r\n    } \r\n\r\n    handleCloseOverlay(){\r\n        this.setState({showOverlay: false});\r\n    }\r\n\r\n    handleShowOverlay(){\r\n        this.setState({showOverlay: true});\r\n    }\r\n\r\n    handleBadgeClick(filter:IKeyValuePair<string, string>){\r\n        if(this.props.onRemoveFilter && filter){\r\n            this.props.onRemoveFilter(filter.key, this.handleSubmit);            \r\n        }\r\n    }\r\n    \r\n    renderFilterBadges(){\r\n        var badgeClassName = \"p-2 ms-1 me-1 d-flex justify-content-between align-items-center\";\r\n\r\n        if(this.props.onRemoveFilter)\r\n            return this.state.filters?.map((f, i) =>\r\n                <Badge pill bg=\"secondary\" className={badgeClassName + \" clickable\"} key={i} onClick={() => this.handleBadgeClick(f)}>\r\n                    <span>{f.value}</span>\r\n                    <span className=\"ps-2\"><i className=\"bi bi-x-circle clickable\"></i></span>\r\n                </Badge>\r\n            );            \r\n\r\n        return this.state.filters?.map((f, i) =>\r\n            <Badge pill bg=\"secondary\" className={badgeClassName} key={i}>{f.value}</Badge>\r\n        );            \r\n    }\r\n\r\n    renderFilterCountBadge(){\r\n        if(this.state.filters?.length > 0)\r\n            return <Badge bg=\"secondary\">{this.state.filters.length}</Badge>\r\n    }\r\n\r\n    render() {\r\n\t\treturn (\r\n            <>\r\n                <Container>\r\n                    <Row>\r\n                        <Col xs={3} md={2}>\r\n                            <Button type=\"button\" onClick={this.handleShowOverlay}>\r\n                                <i className=\"bi bi-funnel\"></i> Filter { this.renderFilterCountBadge() }\r\n                            </Button>\r\n                        </Col>\r\n                        <Col className=\"d-flex align-items-center\">\r\n                            {this.renderFilterBadges()}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <Offcanvas show={this.state.showOverlay} onHide={this.handleCloseOverlay}>\r\n                    <Offcanvas.Header closeButton>\r\n                        <Offcanvas.Title>{this.props.header ?? 'Filter'}</Offcanvas.Title>\r\n                    </Offcanvas.Header>\r\n                    <Offcanvas.Body>\r\n                        <MetadataForm \r\n                            id={this.props.id} \r\n                            metadata={this.props.metadata}\r\n                            btnSubmitText={this.props.btnSubmitText ?? 'Search'}\r\n                            onSubmit={this.handleSubmit}\r\n                            // btnCancelText=\"Reset Search\"\r\n                            // onCancel={this.handleClearFilters}                            \r\n                        />\r\n                    </Offcanvas.Body>\r\n                </Offcanvas>\r\n            </>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default MetadataFilter;","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadataForm.tsx",["154"],"import React, { Component } from \"react\";\r\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\r\nimport MetadataCheckbox, { IMetadataCheckbox } from \"./metadataCheckbox\";\r\nimport { IMetadataFormControl, MetadataControlType } from \"./metadataControl\";\r\nimport MetadataDatePicker, { IMetadataDatePicker } from \"./metadataDatePicker\";\r\nimport MetadataInput, { IMetadataInput } from \"./metadataInput\";\r\nimport MetadataSelect, { IMetadataSelect } from \"./metadataSelect\";\r\nimport MetadataTextArea, { IMetadataTextArea } from \"./metadataTextArea\";\r\n\r\n\r\nexport interface IMetadataForm {\r\n    id: string;\r\n    header?: string;\r\n\r\n    metadata: Array<IMetadataFormControl>;\r\n\r\n    btnSubmitText?: string;\r\n    onSubmit?: () => void;\r\n\r\n    btnCancelText?: string;\r\n    onCancel?: () => void;\r\n}\r\n\r\ninterface IState {\r\n    validatedformClass: string;\r\n}\r\n\r\nclass MetadataForm extends Component<IMetadataForm, IState> {\r\n    _formRef = React.createRef<HTMLFormElement>();\r\n\r\n    constructor(props: IMetadataForm){\r\n        super(props);\r\n\r\n        this.state = {\r\n            validatedformClass: ''\r\n        }\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleCancel = this.handleCancel.bind(this);\r\n    }\r\n\r\n    renderControls(){\r\n        if(this.props.metadata?.length > 0){\r\n            if(this.props.metadata.find(m => m.control.tabIndex != undefined)) { }\r\n            else{\r\n                this.props.metadata.forEach((m, i, arr) => {\r\n                    arr[i].control.tabIndex = i + 1\r\n                });\r\n            }\r\n\r\n            return this.props.metadata.map((m, i) => \r\n                <Col className=\"mb-3\"\r\n                    xs={m.control.widths?.xs ?? 12}\r\n                    sm={m.control.widths?.sm}\r\n                    md={m.control.widths?.md}\r\n                    lg={m.control.widths?.lg}\r\n                    xl={m.control.widths?.xl}\r\n                    xxl={m.control.widths?.xxl}\r\n                    key={i}\r\n                >\r\n                    <Form.Group>\r\n                        { this.renderControlAs(m) }                        \r\n                    </Form.Group>\r\n                </Col>\r\n            );\r\n        }            \r\n    }\r\n\r\n    renderControlAs(metadataFormControl: IMetadataFormControl){\r\n        if(metadataFormControl.controlType === MetadataControlType.Input)\r\n            return <MetadataInput {...(metadataFormControl.control as IMetadataInput)} />\r\n        else if(metadataFormControl.controlType === MetadataControlType.Select)\r\n            return <MetadataSelect {...(metadataFormControl.control as IMetadataSelect)} />\r\n        else if(metadataFormControl.controlType === MetadataControlType.Textarea)\r\n            return <MetadataTextArea {...(metadataFormControl.control as IMetadataTextArea)} />\r\n        else if(metadataFormControl.controlType === MetadataControlType.DatePicker)\r\n            return <MetadataDatePicker {...(metadataFormControl.control as IMetadataDatePicker)} />\r\n        else if(metadataFormControl.controlType === MetadataControlType.Checkbox)\r\n            return <MetadataCheckbox {...(metadataFormControl.control as IMetadataCheckbox)} />\r\n            \r\n    }\r\n\r\n    handleSubmit(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) { \r\n        e.preventDefault();\r\n        \r\n        if(this._formRef.current){\r\n            if(!this._formRef.current.checkValidity()){                \r\n                this.setState({ validatedformClass: 'was-validated'});\r\n                return;\r\n            }            \r\n\r\n            if(this.props.onSubmit)\r\n                this.props.onSubmit();\r\n        }        \r\n    }\r\n\r\n    renderBtnSubmit(){\r\n        if(this.props.onSubmit){\r\n            return  (\r\n                <Button variant=\"outline-primary\" type=\"submit\" onClick={this.handleSubmit}>\r\n                    {this.props.btnSubmitText ?? \"Submit\"}\r\n                </Button>\r\n            );            \r\n        }\r\n    }\r\n\r\n    handleCancel(){\r\n        // do other stuff here if needed eg: hide button?, load button?\r\n        \r\n        if(this.props.onCancel)\r\n            this.props.onCancel();\r\n    }\r\n\r\n    renderBtnCancel(){\r\n        if(this.props.onCancel){\r\n            return  (\r\n                <Button variant=\"outline-danger me-3\" onClick={this.handleCancel}>\r\n                    {this.props.btnCancelText ?? \"Cancel\"}\r\n                </Button>\r\n            );            \r\n        }\r\n    }\r\n    \r\n    renderHeader(){\r\n        if(this.props.header)\r\n            return (\r\n                <Row>\r\n                    <Col className=\"pb-3\"><h3>{this.props.header}</h3></Col>\r\n                </Row>\r\n            )\r\n    }\r\n\r\n    render() {\r\n\t\treturn (\r\n            <Form id={this.props.id} className={\"p2 w-100 \" + this.state.validatedformClass} ref={this._formRef} >\r\n                {this.renderHeader()}\r\n                <Row>\r\n                    { this.renderControls() }\r\n                </Row>\r\n                <Row className=\"pt-2\">\r\n                    <Col className=\"d-flex justify-content-end align-items-center\">\r\n                        { this.renderBtnCancel() }\r\n                        { this.renderBtnSubmit() }\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default MetadataForm;","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\layout\\main.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadataInput.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadataDatePicker.tsx",["155","156","157","158","159","160"],"\r\nimport React, { ChangeEvent, Component, createRef } from \"react\";\r\nimport { Button, Col, Container, FloatingLabel, Form, InputGroup, Overlay, OverlayTrigger, Popover, Row } from \"react-bootstrap\";\r\nimport { StringLiteralLike } from \"typescript\";\r\nimport { DateHelper } from \"../../helpers/dateHelper\";\r\nimport IMetadataControl from \"./metadataControl\";\r\n\r\n\r\nexport interface IMetadataDatePicker extends IMetadataControl {     \r\n    date?: Date;\r\n    onChange?: (dateSelected: Date | undefined) => void;\r\n}\r\n\r\ninterface IState {\r\n    show: boolean;    \r\n    viewDate: Date;\r\n    viewYear: number;\r\n    viewMonth: number;    \r\n    selectedDate?: Date;\r\n    selectedDateText?: string;\r\n}\r\n\r\nclass MetadataDatePicker extends Component<IMetadataDatePicker, IState> {\r\n    _inputGroupRef = createRef<HTMLDivElement>();\r\n    _inputRef = createRef<HTMLInputElement>();\r\n\r\n    _months = [\r\n        { name: \"January\", shortenedName: \"Jan\", number: 1 },\r\n        { name: \"February\", shortenedName: \"Feb\", number: 2 },\r\n        { name: \"March\", shortenedName: \"Mar\", number: 3 },\r\n        { name: \"April\", shortenedName: \"Apr\", number: 4 },\r\n        { name: \"May\", shortenedName: \"May\", number: 5 },\r\n        { name: \"June\", shortenedName: \"Jun\", number: 6 },\r\n        { name: \"July\", shortenedName: \"Jul\", number: 7 },\r\n        { name: \"August\", shortenedName: \"Aug\", number: 8 },\r\n        { name: \"September\", shortenedName: \"Sep\", number: 9 },\r\n        { name: \"October\", shortenedName: \"Oct\", number: 10 },\r\n        { name: \"November\", shortenedName: \"Nov\", number: 11 },\r\n        { name: \"December\", shortenedName: \"Dec\", number: 12 }\r\n    ]\r\n\r\n    constructor(props:IMetadataDatePicker){\r\n        super(props);\r\n\r\n        var viewDate = new Date();\r\n        var selectedDate: Date | undefined;\r\n        var selectedDateText: string = '';\r\n        if(this.props.date){\r\n            viewDate = this.props.date;\r\n            selectedDate = new Date(this.props.date);\r\n            selectedDateText = DateHelper.ToStringYearMonthDate(selectedDate);\r\n        }\r\n        \r\n        this.state = {\r\n            show: false,\r\n            viewDate: viewDate,            \r\n            viewYear: viewDate.getFullYear(),\r\n            viewMonth: viewDate.getMonth() + 1,\r\n            selectedDate: selectedDate,\r\n            selectedDateText: selectedDateText\r\n        }\r\n\r\n        this.handleCalendarClick = this.handleCalendarClick.bind(this);    \r\n        this.handleCalendarSelectChange = this.handleCalendarSelectChange.bind(this);\r\n        this.handleCalendarPrevMonth = this.handleCalendarPrevMonth.bind(this);\r\n        this.handleCalendarNextMonth = this.handleCalendarNextMonth.bind(this);\r\n        this.handleDateSelect = this.handleDateSelect.bind(this);\r\n    }\r\n\r\n    handleCalendarClick() {        \r\n        if(!this.state.show){\r\n            var viewDate: Date = this.state.selectedDate \r\n                ? new Date(this.state.selectedDate.getTime())\r\n                : new Date();\r\n                \r\n            this.setState({\r\n                show: true,\r\n                viewDate: viewDate,            \r\n                viewYear: viewDate.getFullYear(),\r\n                viewMonth: viewDate.getMonth() + 1            \r\n            });\r\n\r\n            this._inputRef.current?.focus();\r\n        }\r\n        else {\r\n            this.setState({\r\n                show: false\r\n            });\r\n        }        \r\n    }\r\n\r\n    handleCalendarSelectChange(e: React.ChangeEvent<HTMLSelectElement>) {\r\n        var value = parseInt(e.target.value);\r\n        var viewDate = e.target.name === \"viewYear\" ? new Date(value, this.state.viewMonth - 1, 1) : new Date(this.state.viewYear, value - 1, 1);        \r\n        this.setState({ \r\n            viewDate: viewDate,            \r\n            viewYear: viewDate.getFullYear(),\r\n            viewMonth: viewDate.getMonth() + 1\r\n        });\r\n    }\r\n\r\n    handleCalendarPrevMonth() {\r\n        var viewDate = new Date(this.state.viewDate.getTime());\r\n        viewDate.setMonth(viewDate.getMonth() - 1);\r\n        this.setState({ \r\n            viewDate: viewDate,            \r\n            viewYear: viewDate.getFullYear(),\r\n            viewMonth: viewDate.getMonth() + 1\r\n        });\r\n    }\r\n\r\n    handleCalendarNextMonth() {\r\n        var viewDate = new Date(this.state.viewDate.getTime());\r\n        viewDate.setMonth(viewDate.getMonth() + 1);\r\n        this.setState({ \r\n            viewDate: viewDate,            \r\n            viewYear: viewDate.getFullYear(),\r\n            viewMonth: viewDate.getMonth() + 1\r\n        });\r\n    }\r\n\r\n    handleDateSelect(e: React.MouseEvent<HTMLDivElement>) {\r\n        if(e.currentTarget.dataset['date']){\r\n            var dateArr = e.currentTarget.dataset['date'].split('-');\r\n            var selectedDate = new Date(parseInt(dateArr[0]), parseInt(dateArr[1]) - 1, parseInt(dateArr[2]));\r\n            this.setState({\r\n                selectedDate: selectedDate,\r\n                show: false,\r\n                selectedDateText: DateHelper.ToStringYearMonthDate(selectedDate)\r\n            }, () => {\r\n                if(this.props.onChange){\r\n                    this.props.onChange(selectedDate);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    renderDatesView() {\r\n        var date = new Date(this.state.viewDate.getTime());\r\n        date.setDate(1);\r\n\r\n        if(date.getDay() != 0){\r\n            date.setDate(date.getDate() - date.getDay());\r\n        }\r\n\r\n        var rows = [];\r\n        for(var r = 0; r < 6; r++){\r\n            var cols = [];\r\n            for(var c = 0; c < 7; c++){\r\n                var isSelectedDate = this.state.selectedDate ? DateHelper.isDateOnlyEqual(date, this.state.selectedDate) : false;\r\n                var isSameMonth = this.state.viewMonth === date.getMonth() + 1;\r\n                cols.push(\r\n                    <Col key={c} \r\n                         data-date={DateHelper.ToStringYearMonthDate(date)} \r\n                         onClick={this.handleDateSelect}\r\n                         className={\"calendar-day\" + (isSelectedDate ? \" calendar-day-selected\" : \"\") + (isSameMonth ? \"\" : \" calendar-day-other-month\")}>\r\n                        \r\n                        {date.getDate()}\r\n                    </Col>\r\n                );\r\n                date.setDate(date.getDate() + 1);\r\n            }\r\n            rows.push(<Row key={r}>{cols}</Row>);\r\n        }\r\n\r\n        return rows; \r\n    }\r\n\r\n    renderMonthOptions() {\r\n        return this._months.map((m, i) => <option key={i} value={m.number}>{m.shortenedName}</option>);\r\n    }\r\n\r\n    renderYearOptions() {\r\n        var year = this.state.viewDate.getFullYear();\r\n        var view = [];\r\n        for(var y = year - 100; y < year + 80; y++){\r\n            view.push(<option key={y} value={y}>{y}</option>);\r\n        }\r\n\r\n        return view;\r\n    }\r\n\r\n    render() {            \r\n\t\treturn (\r\n            <InputGroup className=\"mb-3\" ref={this._inputGroupRef}>\r\n                <FloatingLabel label={this.props.label} controlId={this.props.id} className=\"flex-grow-1\">\r\n                    <Form.Control\r\n                        value={this.state.selectedDateText}\r\n\r\n                        disabled={this.props.disabled}\r\n                        name={this.props.name}\r\n                        required={this.props.required}\r\n\r\n                        style={{display: this.props.hidden === true ? 'none' : 'inherit'}}\r\n                        placeholder={this.props.label}\r\n                        tabIndex={this.props.tabIndex}\r\n\r\n                        readOnly\r\n                        onClick={this.handleCalendarClick}                        \r\n                        className={\"metadata-input calendar-input\" + (this.state.show ? \" calendar-focus\" : \"\")}\r\n                        ref={this._inputRef}\r\n                    />\r\n                </FloatingLabel>                            \r\n                <i className=\"bi bi-calendar3 calendar-button\" onClick={this.handleCalendarClick}></i>                \r\n                <Overlay\r\n                    show={this.state.show}\r\n                    target={this._inputGroupRef}\r\n                    container={this._inputGroupRef}\r\n                    placement=\"bottom\"\r\n                    containerPadding={20}\r\n                    rootClose={true}\r\n                    rootCloseEvent=\"click\"\r\n                    onHide={() => {this.setState({ show: false })}}\r\n                >\r\n                    <Popover className=\"calendar-popover\" >\r\n                        <Popover.Header className=\"d-flex justify-content-between align-items-center\">\r\n                            <i className=\"bi bi-caret-left-fill clickable\" onClick={this.handleCalendarPrevMonth}></i>\r\n                            <div className=\"flex-grow-1 ps-3 pe-3 d-flex align-items-center justify-content-between\">\r\n                                <Form.Select size=\"sm\" \r\n                                    value={this.state.viewMonth} \r\n                                    name=\"viewMonth\"\r\n                                    onChange={this.handleCalendarSelectChange}\r\n                                >\r\n                                    { this.renderMonthOptions() }\r\n                                </Form.Select>\r\n                                <Form.Select size=\"sm\" \r\n                                    value={this.state.viewYear} \r\n                                    name=\"viewYear\"\r\n                                    onChange={this.handleCalendarSelectChange}\r\n                                >\r\n                                    { this.renderYearOptions() }\r\n                                </Form.Select>\r\n                            </div>\r\n                            <i className=\"bi bi-caret-right-fill clickable\" onClick={this.handleCalendarNextMonth}></i>\r\n                        </Popover.Header>\r\n                        <Popover.Body>\r\n                            <Row>\r\n                                <Col></Col>\r\n                            </Row>\r\n                            <Row className=\"calendar-date-header\">\r\n                                <Col>Su</Col>\r\n                                <Col>Mo</Col>\r\n                                <Col>Tu</Col>\r\n                                <Col>We</Col>\r\n                                <Col>Th</Col>\r\n                                <Col>Fr</Col>\r\n                                <Col>Sa</Col>\r\n                            </Row>\r\n                            { this.renderDatesView() }\r\n                        </Popover.Body>\r\n                    </Popover>\r\n                </Overlay>\r\n            </InputGroup>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default MetadataDatePicker;","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadataSelect.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadataTextArea.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\helpers\\stringHelper.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\layout\\mainNav.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\layout\\pageNav.tsx",["161","162","163","164"],"import DropdownMenu from '@restart/ui/esm/DropdownMenu';\r\nimport React, { Component } from 'react';\r\nimport { Button, ButtonGroup, Dropdown, DropdownButton, Nav } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport interface ILayoutPageNavLink {\r\n    path: string;\r\n    title: string;\r\n    iconClass?: string;\r\n}\r\n\r\ninterface IProp {\r\n    links: ILayoutPageNavLink[]; \r\n    currentPath: string;   \r\n}\r\n\r\nclass PageNav extends Component<IProp> {   \r\n\r\n    constructor(props: IProp){\r\n        super(props);\r\n    }\r\n\r\n    renderIcon(link:ILayoutPageNavLink){\r\n        if(link.iconClass){\r\n            return <i className={link.iconClass + ' pe-md-2'}></i>\r\n        }\r\n    }\r\n\r\n    renderLinks() {\r\n        return this.props.links.map((l, i) =>\r\n            <Link\r\n                to={l.path} \r\n                className={\r\n                    'page-nav-link nav-link rounded-start' + \r\n                    (l.path === this.props.currentPath ? ' active' : '') +\r\n                    (i > 2 && this.props.links.length > 4 ? ' d-none d-md-block' : '')\r\n                }\r\n            >\r\n                { this.renderIcon(l) } <span>{l.title}</span>\r\n            </Link>\r\n        );\r\n    }\r\n\r\n    renderMoreLinks() {\r\n        if(this.props.links.length < 4)\r\n            return;\r\n\r\n        // return (\r\n        //     <Nav.Link className='page-nav-link'>\r\n        //         <i className='bi bi-three-dots-vertical'></i> <span>More</span>\r\n        //     </Nav.Link>\r\n        // )\r\n\r\n        return (\r\n            <Dropdown as={ButtonGroup} className='page-nav d-md-none'>\r\n                <Dropdown.Toggle className='d-flex flex-column justify-content-center align-items-center'><i className='bi bi-three-dots'></i><span>More</span></Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                    {\r\n                        this.props.links\r\n                            .slice(3, this.props.links.length)\r\n                            .map((l, i) =>\r\n                                <Dropdown.Item key={i} as={Link} to={l.path}>\r\n                                    { this.renderIcon(l) } <span className='ps-2'>{l.title}</span>\r\n                                </Dropdown.Item> \r\n                            )\r\n                    }\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        )\r\n    }\r\n\r\n    render() {\r\n\t\treturn (\t\t\t\r\n            <Nav className=\"page-nav\">\r\n                { this.renderLinks() }\r\n                { this.renderMoreLinks() }\r\n            </Nav>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default PageNav;\r\n","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\userAvatar.tsx",["165"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { IAppState } from '../store/store';\r\nimport { ICurrentUserDetails } from '../models/users/CurrentUserDetails';\r\n\r\ninterface IUserAvatarProp {\r\n    size?: number;\r\n    bgColor?: string;\r\n    clickable?: boolean;\r\n    \r\n    currentUser: ICurrentUserDetails;\r\n}\r\n\r\nclass UserAvatar extends Component<IUserAvatarProp> {\r\n    \r\n    constructor(props: IUserAvatarProp){\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        var initials = 'UR';\r\n        if(this.props.currentUser){\r\n            if(this.props.currentUser.fullName){\r\n                var names = this.props.currentUser.fullName.split(' ');\r\n                if(names.length > 0){\r\n                    initials = names[0].charAt(0) + names[names.length - 1].charAt(0);\r\n                }\r\n            }\r\n        }\r\n\r\n        var size: number = this.props.size ?? 45;\r\n        var circleStyle: React.CSSProperties = {\r\n            width: size,\r\n            height: size,\r\n            backgroundColor: this.props.bgColor ?? 'var(--bs-primary)',\r\n            borderRadius: 50,\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            cursor: this.props.clickable ? 'pointer' : '',\r\n        };\r\n\r\n        var initialsStyle: React.CSSProperties = {\r\n            fontSize: size / 2, /* 50% of parent */\r\n            color: '#fff',\r\n            fontFamily: 'Courier New, monospace'                        \r\n        };\r\n\r\n        return <> \r\n            <div style={circleStyle}>\r\n                <span style={initialsStyle}>{initials}</span>\r\n            </div>\r\n        </>\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (store: IAppState) => {\r\n\treturn {\r\n\t\tcurrentUser: store.currentUserState.currentUser\r\n\t};\r\n}\r\n\r\nexport default connect(mapStateToProps)(UserAvatar);\r\n","D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\api\\apiBase.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\constants\\appConstants.tsx",[],"D:\\Users\\RJ\\Documents\\projects\\base-react-app\\src\\components\\metadata\\metadataCheckbox.tsx",[],{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":14,"column":8,"nodeType":"172","messageId":"173","endLine":14,"endColumn":20},{"ruleId":"170","severity":1,"message":"174","line":3,"column":10,"nodeType":"172","messageId":"173","endLine":3,"endColumn":15},{"ruleId":"170","severity":1,"message":"175","line":4,"column":10,"nodeType":"172","messageId":"173","endLine":4,"endColumn":18},{"ruleId":"170","severity":1,"message":"176","line":8,"column":8,"nodeType":"172","messageId":"173","endLine":8,"endColumn":23},{"ruleId":"170","severity":1,"message":"177","line":13,"column":8,"nodeType":"172","messageId":"173","endLine":13,"endColumn":26},{"ruleId":"170","severity":1,"message":"178","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":28},{"ruleId":"170","severity":1,"message":"175","line":6,"column":10,"nodeType":"172","messageId":"173","endLine":6,"endColumn":18},{"ruleId":"170","severity":1,"message":"179","line":1,"column":10,"nodeType":"172","messageId":"173","endLine":1,"endColumn":23},{"ruleId":"170","severity":1,"message":"180","line":1,"column":25,"nodeType":"172","messageId":"173","endLine":1,"endColumn":33},{"ruleId":"170","severity":1,"message":"181","line":2,"column":8,"nodeType":"172","messageId":"173","endLine":2,"endColumn":13},{"ruleId":"170","severity":1,"message":"182","line":4,"column":10,"nodeType":"172","messageId":"173","endLine":4,"endColumn":25},{"ruleId":"183","severity":1,"message":"184","line":52,"column":100,"nodeType":"185","messageId":"186","endLine":52,"endColumn":102},{"ruleId":"183","severity":1,"message":"187","line":44,"column":65,"nodeType":"185","messageId":"186","endLine":44,"endColumn":67},{"ruleId":"170","severity":1,"message":"178","line":2,"column":17,"nodeType":"172","messageId":"173","endLine":2,"endColumn":28},{"ruleId":"170","severity":1,"message":"188","line":3,"column":10,"nodeType":"172","messageId":"173","endLine":3,"endColumn":16},{"ruleId":"170","severity":1,"message":"189","line":3,"column":23,"nodeType":"172","messageId":"173","endLine":3,"endColumn":32},{"ruleId":"170","severity":1,"message":"190","line":3,"column":76,"nodeType":"172","messageId":"173","endLine":3,"endColumn":90},{"ruleId":"170","severity":1,"message":"191","line":4,"column":10,"nodeType":"172","messageId":"173","endLine":4,"endColumn":27},{"ruleId":"183","severity":1,"message":"187","line":142,"column":26,"nodeType":"185","messageId":"186","endLine":142,"endColumn":28},{"ruleId":"170","severity":1,"message":"192","line":1,"column":8,"nodeType":"172","messageId":"173","endLine":1,"endColumn":20},{"ruleId":"170","severity":1,"message":"188","line":3,"column":10,"nodeType":"172","messageId":"173","endLine":3,"endColumn":16},{"ruleId":"170","severity":1,"message":"193","line":3,"column":41,"nodeType":"172","messageId":"173","endLine":3,"endColumn":55},{"ruleId":"194","severity":1,"message":"195","line":19,"column":5,"nodeType":"196","messageId":"197","endLine":21,"endColumn":6},{"ruleId":"194","severity":1,"message":"195","line":16,"column":5,"nodeType":"196","messageId":"197","endLine":18,"endColumn":6},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"@typescript-eslint/no-unused-vars","'SecuredRoute' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'PagePath' is defined but never used.","'UserProfilePage' is defined but never used.","'MetadataDatePicker' is defined but never used.","'ChangeEvent' is defined but never used.","'ActionCreator' is defined but never used.","'Dispatch' is defined but never used.","'axios' is defined but never used.","'ICharacterState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'Button' is defined but never used.","'Container' is defined but never used.","'OverlayTrigger' is defined but never used.","'StringLiteralLike' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownButton' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]